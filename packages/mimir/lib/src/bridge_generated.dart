// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.51.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class EmbeddedMilli {
  /// Enforce the binding for this library (to prevent tree-shaking)
  Future<void> enforceBinding({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEnforceBindingConstMeta;

  /// Ensures an instance of milli (represented by just a directory) is initialized
  Future<void> ensureInstanceInitialized(
      {required String instaceDir, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEnsureInstanceInitializedConstMeta;

  /// Ensures a milli index is initialized
  Future<void> ensureIndexInitialized(
      {required String instanceDir, required String indexName, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEnsureIndexInitializedConstMeta;

  /// Adds the given list of documents to the specified milli index
  ///
  /// Replaces documents that already exist in the index based on document ids.
  Future<void> addDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddDocumentsConstMeta;

  /// Deletes the documents with the given ids from the milli index
  Future<void> deleteDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documentIds,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteDocumentsConstMeta;

  /// Deletes all the documents from the milli index
  Future<void> deleteAllDocuments(
      {required String instanceDir, required String indexName, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteAllDocumentsConstMeta;

  /// Replaces all documents with the given documents
  Future<void> setDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetDocumentsConstMeta;

  /// Returns the document with the specified id from the index, if one exists
  Future<String?> getDocument(
      {required String instanceDir,
      required String indexName,
      required String documentId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDocumentConstMeta;

  /// Returns all documents stored in the index.
  Future<List<String>> getAllDocuments(
      {required String instanceDir, required String indexName, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAllDocumentsConstMeta;

  /// Performs a search against the index and returns the documents found
  Future<List<String>> searchDocuments(
      {required String instanceDir,
      required String indexName,
      String? query,
      int? limit,
      List<SortBy>? sortCriteria,
      required Filter filter,
      required TermsMatchingStrategy matchingStrategy,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSearchDocumentsConstMeta;

  /// Gets the settings of the specified index
  Future<MimirIndexSettings> getSettings(
      {required String instanceDir, required String indexName, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSettingsConstMeta;

  /// Sets the settings of the specified index
  Future<void> setSettings(
      {required String instanceDir,
      required String indexName,
      required MimirIndexSettings settings,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetSettingsConstMeta;
}

@freezed
class Filter with _$Filter {
  /// Creates an "or" [Filter] of the given sub-filters.
  const factory Filter.or(
    List<Filter> field0,
  ) = Filter_Or;

  /// Creates an "and" [Filter] of the given sub-filters.
  const factory Filter.and(
    List<Filter> field0,
  ) = Filter_And;

  /// Creates a "not" [Filter] of the given sub-filter.
  const factory Filter.not(
    Filter field0,
  ) = Filter_Not;

  /// Creates a [Filter] that specifies the given field exists.
  const factory Filter.exists({
    required String field,
  }) = Filter_Exists;

  /// Creates a [Filter] for the "IN" operator.
  const factory Filter.inValues({
    required String field,
    required List<String> values,
  }) = Filter_InValues;

  /// Creates a [Filter] for the ">" operator.
  const factory Filter.greaterThan({
    required String field,
    required String value,
  }) = Filter_GreaterThan;

  /// Creates a [Filter] for the ">=" operator.
  const factory Filter.greaterThanOrEqual({
    required String field,
    required String value,
  }) = Filter_GreaterThanOrEqual;

  /// Creates a [Filter] for the "==" operator.
  const factory Filter.equal({
    required String field,
    required String value,
  }) = Filter_Equal;

  /// Creates a [Filter] for the "!=" operator.
  const factory Filter.notEqual({
    required String field,
    required String value,
  }) = Filter_NotEqual;

  /// Creates a [Filter] for the "<" operator.
  const factory Filter.lessThan({
    required String field,
    required String value,
  }) = Filter_LessThan;

  /// Creates a [Filter] for the "<=" operator.
  const factory Filter.lessThanOrEqual({
    required String field,
    required String value,
  }) = Filter_LessThanOrEqual;

  /// Creates a [Filter] for the "BETWEEN" operator.
  const factory Filter.between({
    required String field,
    required String from,
    required String to,
  }) = Filter_Between;
}

/// The settings of a mimir index
@freezed
class MimirIndexSettings with _$MimirIndexSettings {
  const factory MimirIndexSettings({
    List<String>? searchableFields,
    required List<String> filterableFields,
    required List<String> sortableFields,
    required List<String> rankingRules,
    required List<String> stopWords,
    required List<Synonyms> synonyms,
    required bool typosEnabled,
    required int minWordSizeForOneTypo,
    required int minWordSizeForTwoTypos,
    required List<String> disallowTyposOnWords,
    required List<String> disallowTyposOnFields,
  }) = _MimirIndexSettings;
}

@freezed
class SortBy with _$SortBy {
  /// Sort by the given field in ascending order
  const factory SortBy.asc(
    String field0,
  ) = SortBy_Asc;

  /// Sort by the given field in descending order
  const factory SortBy.desc(
    String field0,
  ) = SortBy_Desc;
}

/// Represents the synonyms of a given word
@freezed
class Synonyms with _$Synonyms {
  const factory Synonyms({
    required String word,
    required List<String> synonyms,
  }) = _Synonyms;
}

/// See https://docs.meilisearch.com/reference/api/search.html#matching-strategy
enum TermsMatchingStrategy {
  /// Remove last word first
  Last,

  /// Remove first word first
  First,

  /// Remove more frequent word first
  Frequency,

  /// Remove smallest word first
  Size,

  /// Only one of the word is mandatory
  Any,

  /// All words are mandatory
  All,
}

class EmbeddedMilliImpl implements EmbeddedMilli {
  final EmbeddedMilliPlatform _platform;
  factory EmbeddedMilliImpl(ExternalLibrary dylib) =>
      EmbeddedMilliImpl.raw(EmbeddedMilliPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory EmbeddedMilliImpl.wasm(FutureOr<WasmModule> module) =>
      EmbeddedMilliImpl(module as ExternalLibrary);
  EmbeddedMilliImpl.raw(this._platform);
  Future<void> enforceBinding({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_enforce_binding(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kEnforceBindingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEnforceBindingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "enforce_binding",
        argNames: [],
      );

  Future<void> ensureInstanceInitialized(
      {required String instaceDir, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instaceDir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_ensure_instance_initialized(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kEnsureInstanceInitializedConstMeta,
      argValues: [instaceDir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEnsureInstanceInitializedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ensure_instance_initialized",
        argNames: ["instaceDir"],
      );

  Future<void> ensureIndexInitialized(
      {required String instanceDir, required String indexName, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_ensure_index_initialized(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kEnsureIndexInitializedConstMeta,
      argValues: [instanceDir, indexName],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEnsureIndexInitializedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ensure_index_initialized",
        argNames: ["instanceDir", "indexName"],
      );

  Future<void> addDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    var arg2 = _platform.api2wire_StringList(documents);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_documents(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kAddDocumentsConstMeta,
      argValues: [instanceDir, indexName, documents],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddDocumentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_documents",
        argNames: ["instanceDir", "indexName", "documents"],
      );

  Future<void> deleteDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documentIds,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    var arg2 = _platform.api2wire_StringList(documentIds);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_delete_documents(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeleteDocumentsConstMeta,
      argValues: [instanceDir, indexName, documentIds],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteDocumentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_documents",
        argNames: ["instanceDir", "indexName", "documentIds"],
      );

  Future<void> deleteAllDocuments(
      {required String instanceDir, required String indexName, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_delete_all_documents(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeleteAllDocumentsConstMeta,
      argValues: [instanceDir, indexName],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteAllDocumentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_all_documents",
        argNames: ["instanceDir", "indexName"],
      );

  Future<void> setDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    var arg2 = _platform.api2wire_StringList(documents);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_documents(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetDocumentsConstMeta,
      argValues: [instanceDir, indexName, documents],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetDocumentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_documents",
        argNames: ["instanceDir", "indexName", "documents"],
      );

  Future<String?> getDocument(
      {required String instanceDir,
      required String indexName,
      required String documentId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    var arg2 = _platform.api2wire_String(documentId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_document(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetDocumentConstMeta,
      argValues: [instanceDir, indexName, documentId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_document",
        argNames: ["instanceDir", "indexName", "documentId"],
      );

  Future<List<String>> getAllDocuments(
      {required String instanceDir, required String indexName, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_all_documents(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetAllDocumentsConstMeta,
      argValues: [instanceDir, indexName],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAllDocumentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_all_documents",
        argNames: ["instanceDir", "indexName"],
      );

  Future<List<String>> searchDocuments(
      {required String instanceDir,
      required String indexName,
      String? query,
      int? limit,
      List<SortBy>? sortCriteria,
      required Filter filter,
      required TermsMatchingStrategy matchingStrategy,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    var arg2 = _platform.api2wire_opt_String(query);
    var arg3 = _platform.api2wire_opt_box_autoadd_u32(limit);
    var arg4 = _platform.api2wire_opt_list_sort_by(sortCriteria);
    var arg5 = _platform.api2wire_box_autoadd_filter(filter);
    var arg6 = api2wire_terms_matching_strategy(matchingStrategy);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_search_documents(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_StringList,
      constMeta: kSearchDocumentsConstMeta,
      argValues: [
        instanceDir,
        indexName,
        query,
        limit,
        sortCriteria,
        filter,
        matchingStrategy
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSearchDocumentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "search_documents",
        argNames: [
          "instanceDir",
          "indexName",
          "query",
          "limit",
          "sortCriteria",
          "filter",
          "matchingStrategy"
        ],
      );

  Future<MimirIndexSettings> getSettings(
      {required String instanceDir, required String indexName, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_settings(port_, arg0, arg1),
      parseSuccessData: _wire2api_mimir_index_settings,
      constMeta: kGetSettingsConstMeta,
      argValues: [instanceDir, indexName],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSettingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_settings",
        argNames: ["instanceDir", "indexName"],
      );

  Future<void> setSettings(
      {required String instanceDir,
      required String indexName,
      required MimirIndexSettings settings,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceDir);
    var arg1 = _platform.api2wire_String(indexName);
    var arg2 = _platform.api2wire_box_autoadd_mimir_index_settings(settings);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_settings(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetSettingsConstMeta,
      argValues: [instanceDir, indexName, settings],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetSettingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_settings",
        argNames: ["instanceDir", "indexName", "settings"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  List<Synonyms> _wire2api_list_synonyms(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_synonyms).toList();
  }

  MimirIndexSettings _wire2api_mimir_index_settings(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return MimirIndexSettings(
      searchableFields: _wire2api_opt_StringList(arr[0]),
      filterableFields: _wire2api_StringList(arr[1]),
      sortableFields: _wire2api_StringList(arr[2]),
      rankingRules: _wire2api_StringList(arr[3]),
      stopWords: _wire2api_StringList(arr[4]),
      synonyms: _wire2api_list_synonyms(arr[5]),
      typosEnabled: _wire2api_bool(arr[6]),
      minWordSizeForOneTypo: _wire2api_u8(arr[7]),
      minWordSizeForTwoTypos: _wire2api_u8(arr[8]),
      disallowTyposOnWords: _wire2api_StringList(arr[9]),
      disallowTyposOnFields: _wire2api_StringList(arr[10]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  List<String>? _wire2api_opt_StringList(dynamic raw) {
    return raw == null ? null : _wire2api_StringList(raw);
  }

  Synonyms _wire2api_synonyms(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Synonyms(
      word: _wire2api_String(arr[0]),
      synonyms: _wire2api_StringList(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_terms_matching_strategy(TermsMatchingStrategy raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class EmbeddedMilliPlatform extends FlutterRustBridgeBase<EmbeddedMilliWire> {
  EmbeddedMilliPlatform(ffi.DynamicLibrary dylib)
      : super(EmbeddedMilliWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_Filter> api2wire_box_autoadd_filter(Filter raw) {
    final ptr = inner.new_box_autoadd_filter_0();
    _api_fill_to_wire_filter(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MimirIndexSettings>
      api2wire_box_autoadd_mimir_index_settings(MimirIndexSettings raw) {
    final ptr = inner.new_box_autoadd_mimir_index_settings_0();
    _api_fill_to_wire_mimir_index_settings(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<wire_Filter> api2wire_box_filter(Filter raw) {
    final ptr = inner.new_box_filter_0();
    _api_fill_to_wire_filter(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_filter> api2wire_list_filter(List<Filter> raw) {
    final ans = inner.new_list_filter_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_filter(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_sort_by> api2wire_list_sort_by(List<SortBy> raw) {
    final ans = inner.new_list_sort_by_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_sort_by(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_synonyms> api2wire_list_synonyms(List<Synonyms> raw) {
    final ans = inner.new_list_synonyms_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_synonyms(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_opt_StringList(List<String>? raw) {
    return raw == null ? ffi.nullptr : api2wire_StringList(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<wire_list_sort_by> api2wire_opt_list_sort_by(List<SortBy>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_sort_by(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_filter(
      Filter apiObj, ffi.Pointer<wire_Filter> wireObj) {
    _api_fill_to_wire_filter(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_mimir_index_settings(
      MimirIndexSettings apiObj, ffi.Pointer<wire_MimirIndexSettings> wireObj) {
    _api_fill_to_wire_mimir_index_settings(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_filter(
      Filter apiObj, ffi.Pointer<wire_Filter> wireObj) {
    _api_fill_to_wire_filter(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_filter(Filter apiObj, wire_Filter wireObj) {
    if (apiObj is Filter_Or) {
      var pre_field0 = api2wire_list_filter(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Filter_Or();
      wireObj.kind.ref.Or.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Filter_And) {
      var pre_field0 = api2wire_list_filter(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Filter_And();
      wireObj.kind.ref.And.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Filter_Not) {
      var pre_field0 = api2wire_box_filter(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_Filter_Not();
      wireObj.kind.ref.Not.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Filter_Exists) {
      var pre_field = api2wire_String(apiObj.field);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_Filter_Exists();
      wireObj.kind.ref.Exists.ref.field = pre_field;
      return;
    }
    if (apiObj is Filter_InValues) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_values = api2wire_StringList(apiObj.values);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_Filter_InValues();
      wireObj.kind.ref.InValues.ref.field = pre_field;
      wireObj.kind.ref.InValues.ref.values = pre_values;
      return;
    }
    if (apiObj is Filter_GreaterThan) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_value = api2wire_String(apiObj.value);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_Filter_GreaterThan();
      wireObj.kind.ref.GreaterThan.ref.field = pre_field;
      wireObj.kind.ref.GreaterThan.ref.value = pre_value;
      return;
    }
    if (apiObj is Filter_GreaterThanOrEqual) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_value = api2wire_String(apiObj.value);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_Filter_GreaterThanOrEqual();
      wireObj.kind.ref.GreaterThanOrEqual.ref.field = pre_field;
      wireObj.kind.ref.GreaterThanOrEqual.ref.value = pre_value;
      return;
    }
    if (apiObj is Filter_Equal) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_value = api2wire_String(apiObj.value);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_Filter_Equal();
      wireObj.kind.ref.Equal.ref.field = pre_field;
      wireObj.kind.ref.Equal.ref.value = pre_value;
      return;
    }
    if (apiObj is Filter_NotEqual) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_value = api2wire_String(apiObj.value);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_Filter_NotEqual();
      wireObj.kind.ref.NotEqual.ref.field = pre_field;
      wireObj.kind.ref.NotEqual.ref.value = pre_value;
      return;
    }
    if (apiObj is Filter_LessThan) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_value = api2wire_String(apiObj.value);
      wireObj.tag = 9;
      wireObj.kind = inner.inflate_Filter_LessThan();
      wireObj.kind.ref.LessThan.ref.field = pre_field;
      wireObj.kind.ref.LessThan.ref.value = pre_value;
      return;
    }
    if (apiObj is Filter_LessThanOrEqual) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_value = api2wire_String(apiObj.value);
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_Filter_LessThanOrEqual();
      wireObj.kind.ref.LessThanOrEqual.ref.field = pre_field;
      wireObj.kind.ref.LessThanOrEqual.ref.value = pre_value;
      return;
    }
    if (apiObj is Filter_Between) {
      var pre_field = api2wire_String(apiObj.field);
      var pre_from = api2wire_String(apiObj.from);
      var pre_to = api2wire_String(apiObj.to);
      wireObj.tag = 11;
      wireObj.kind = inner.inflate_Filter_Between();
      wireObj.kind.ref.Between.ref.field = pre_field;
      wireObj.kind.ref.Between.ref.from = pre_from;
      wireObj.kind.ref.Between.ref.to = pre_to;
      return;
    }
  }

  void _api_fill_to_wire_mimir_index_settings(
      MimirIndexSettings apiObj, wire_MimirIndexSettings wireObj) {
    wireObj.searchable_fields =
        api2wire_opt_StringList(apiObj.searchableFields);
    wireObj.filterable_fields = api2wire_StringList(apiObj.filterableFields);
    wireObj.sortable_fields = api2wire_StringList(apiObj.sortableFields);
    wireObj.ranking_rules = api2wire_StringList(apiObj.rankingRules);
    wireObj.stop_words = api2wire_StringList(apiObj.stopWords);
    wireObj.synonyms = api2wire_list_synonyms(apiObj.synonyms);
    wireObj.typos_enabled = api2wire_bool(apiObj.typosEnabled);
    wireObj.min_word_size_for_one_typo =
        api2wire_u8(apiObj.minWordSizeForOneTypo);
    wireObj.min_word_size_for_two_typos =
        api2wire_u8(apiObj.minWordSizeForTwoTypos);
    wireObj.disallow_typos_on_words =
        api2wire_StringList(apiObj.disallowTyposOnWords);
    wireObj.disallow_typos_on_fields =
        api2wire_StringList(apiObj.disallowTyposOnFields);
  }

  void _api_fill_to_wire_sort_by(SortBy apiObj, wire_SortBy wireObj) {
    if (apiObj is SortBy_Asc) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_SortBy_Asc();
      wireObj.kind.ref.Asc.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SortBy_Desc) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_SortBy_Desc();
      wireObj.kind.ref.Desc.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_synonyms(Synonyms apiObj, wire_Synonyms wireObj) {
    wireObj.word = api2wire_String(apiObj.word);
    wireObj.synonyms = api2wire_StringList(apiObj.synonyms);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class EmbeddedMilliWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  EmbeddedMilliWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  EmbeddedMilliWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void enforce_binding() {
    return _enforce_binding();
  }

  late final _enforce_bindingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('enforce_binding');
  late final _enforce_binding =
      _enforce_bindingPtr.asFunction<void Function()>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_enforce_binding(
    int port_,
  ) {
    return _wire_enforce_binding(
      port_,
    );
  }

  late final _wire_enforce_bindingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_enforce_binding');
  late final _wire_enforce_binding =
      _wire_enforce_bindingPtr.asFunction<void Function(int)>();

  void wire_ensure_instance_initialized(
    int port_,
    ffi.Pointer<wire_uint_8_list> instace_dir,
  ) {
    return _wire_ensure_instance_initialized(
      port_,
      instace_dir,
    );
  }

  late final _wire_ensure_instance_initializedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_ensure_instance_initialized');
  late final _wire_ensure_instance_initialized =
      _wire_ensure_instance_initializedPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ensure_index_initialized(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
  ) {
    return _wire_ensure_index_initialized(
      port_,
      instance_dir,
      index_name,
    );
  }

  late final _wire_ensure_index_initializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ensure_index_initialized');
  late final _wire_ensure_index_initialized =
      _wire_ensure_index_initializedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_documents(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
    ffi.Pointer<wire_StringList> documents,
  ) {
    return _wire_add_documents(
      port_,
      instance_dir,
      index_name,
      documents,
    );
  }

  late final _wire_add_documentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_add_documents');
  late final _wire_add_documents = _wire_add_documentsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_delete_documents(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
    ffi.Pointer<wire_StringList> document_ids,
  ) {
    return _wire_delete_documents(
      port_,
      instance_dir,
      index_name,
      document_ids,
    );
  }

  late final _wire_delete_documentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_delete_documents');
  late final _wire_delete_documents = _wire_delete_documentsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_delete_all_documents(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
  ) {
    return _wire_delete_all_documents(
      port_,
      instance_dir,
      index_name,
    );
  }

  late final _wire_delete_all_documentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_all_documents');
  late final _wire_delete_all_documents =
      _wire_delete_all_documentsPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_documents(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
    ffi.Pointer<wire_StringList> documents,
  ) {
    return _wire_set_documents(
      port_,
      instance_dir,
      index_name,
      documents,
    );
  }

  late final _wire_set_documentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_set_documents');
  late final _wire_set_documents = _wire_set_documentsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_get_document(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
    ffi.Pointer<wire_uint_8_list> document_id,
  ) {
    return _wire_get_document(
      port_,
      instance_dir,
      index_name,
      document_id,
    );
  }

  late final _wire_get_documentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_document');
  late final _wire_get_document = _wire_get_documentPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_all_documents(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
  ) {
    return _wire_get_all_documents(
      port_,
      instance_dir,
      index_name,
    );
  }

  late final _wire_get_all_documentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_all_documents');
  late final _wire_get_all_documents = _wire_get_all_documentsPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_search_documents(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
    ffi.Pointer<wire_uint_8_list> query,
    ffi.Pointer<ffi.Uint32> limit,
    ffi.Pointer<wire_list_sort_by> sort_criteria,
    ffi.Pointer<wire_Filter> filter,
    int matching_strategy,
  ) {
    return _wire_search_documents(
      port_,
      instance_dir,
      index_name,
      query,
      limit,
      sort_criteria,
      filter,
      matching_strategy,
    );
  }

  late final _wire_search_documentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<wire_list_sort_by>,
              ffi.Pointer<wire_Filter>,
              ffi.Int32)>>('wire_search_documents');
  late final _wire_search_documents = _wire_search_documentsPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<wire_list_sort_by>,
          ffi.Pointer<wire_Filter>,
          int)>();

  void wire_get_settings(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
  ) {
    return _wire_get_settings(
      port_,
      instance_dir,
      index_name,
    );
  }

  late final _wire_get_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_settings');
  late final _wire_get_settings = _wire_get_settingsPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_settings(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_dir,
    ffi.Pointer<wire_uint_8_list> index_name,
    ffi.Pointer<wire_MimirIndexSettings> settings,
  ) {
    return _wire_set_settings(
      port_,
      instance_dir,
      index_name,
      settings,
    );
  }

  late final _wire_set_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_MimirIndexSettings>)>>('wire_set_settings');
  late final _wire_set_settings = _wire_set_settingsPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_MimirIndexSettings>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_Filter> new_box_autoadd_filter_0() {
    return _new_box_autoadd_filter_0();
  }

  late final _new_box_autoadd_filter_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Filter> Function()>>(
          'new_box_autoadd_filter_0');
  late final _new_box_autoadd_filter_0 = _new_box_autoadd_filter_0Ptr
      .asFunction<ffi.Pointer<wire_Filter> Function()>();

  ffi.Pointer<wire_MimirIndexSettings>
      new_box_autoadd_mimir_index_settings_0() {
    return _new_box_autoadd_mimir_index_settings_0();
  }

  late final _new_box_autoadd_mimir_index_settings_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_MimirIndexSettings> Function()>>(
      'new_box_autoadd_mimir_index_settings_0');
  late final _new_box_autoadd_mimir_index_settings_0 =
      _new_box_autoadd_mimir_index_settings_0Ptr
          .asFunction<ffi.Pointer<wire_MimirIndexSettings> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<wire_Filter> new_box_filter_0() {
    return _new_box_filter_0();
  }

  late final _new_box_filter_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Filter> Function()>>(
          'new_box_filter_0');
  late final _new_box_filter_0 =
      _new_box_filter_0Ptr.asFunction<ffi.Pointer<wire_Filter> Function()>();

  ffi.Pointer<wire_list_filter> new_list_filter_0(
    int len,
  ) {
    return _new_list_filter_0(
      len,
    );
  }

  late final _new_list_filter_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_filter> Function(
              ffi.Int32)>>('new_list_filter_0');
  late final _new_list_filter_0 = _new_list_filter_0Ptr
      .asFunction<ffi.Pointer<wire_list_filter> Function(int)>();

  ffi.Pointer<wire_list_sort_by> new_list_sort_by_0(
    int len,
  ) {
    return _new_list_sort_by_0(
      len,
    );
  }

  late final _new_list_sort_by_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_sort_by> Function(
              ffi.Int32)>>('new_list_sort_by_0');
  late final _new_list_sort_by_0 = _new_list_sort_by_0Ptr
      .asFunction<ffi.Pointer<wire_list_sort_by> Function(int)>();

  ffi.Pointer<wire_list_synonyms> new_list_synonyms_0(
    int len,
  ) {
    return _new_list_synonyms_0(
      len,
    );
  }

  late final _new_list_synonyms_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_synonyms> Function(
              ffi.Int32)>>('new_list_synonyms_0');
  late final _new_list_synonyms_0 = _new_list_synonyms_0Ptr
      .asFunction<ffi.Pointer<wire_list_synonyms> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<FilterKind> inflate_Filter_Or() {
    return _inflate_Filter_Or();
  }

  late final _inflate_Filter_OrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_Or');
  late final _inflate_Filter_Or =
      _inflate_Filter_OrPtr.asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_And() {
    return _inflate_Filter_And();
  }

  late final _inflate_Filter_AndPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_And');
  late final _inflate_Filter_And =
      _inflate_Filter_AndPtr.asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_Not() {
    return _inflate_Filter_Not();
  }

  late final _inflate_Filter_NotPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_Not');
  late final _inflate_Filter_Not =
      _inflate_Filter_NotPtr.asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_Exists() {
    return _inflate_Filter_Exists();
  }

  late final _inflate_Filter_ExistsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_Exists');
  late final _inflate_Filter_Exists = _inflate_Filter_ExistsPtr
      .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_InValues() {
    return _inflate_Filter_InValues();
  }

  late final _inflate_Filter_InValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_InValues');
  late final _inflate_Filter_InValues = _inflate_Filter_InValuesPtr
      .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_GreaterThan() {
    return _inflate_Filter_GreaterThan();
  }

  late final _inflate_Filter_GreaterThanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_GreaterThan');
  late final _inflate_Filter_GreaterThan = _inflate_Filter_GreaterThanPtr
      .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_GreaterThanOrEqual() {
    return _inflate_Filter_GreaterThanOrEqual();
  }

  late final _inflate_Filter_GreaterThanOrEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_GreaterThanOrEqual');
  late final _inflate_Filter_GreaterThanOrEqual =
      _inflate_Filter_GreaterThanOrEqualPtr
          .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_Equal() {
    return _inflate_Filter_Equal();
  }

  late final _inflate_Filter_EqualPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_Equal');
  late final _inflate_Filter_Equal =
      _inflate_Filter_EqualPtr.asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_NotEqual() {
    return _inflate_Filter_NotEqual();
  }

  late final _inflate_Filter_NotEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_NotEqual');
  late final _inflate_Filter_NotEqual = _inflate_Filter_NotEqualPtr
      .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_LessThan() {
    return _inflate_Filter_LessThan();
  }

  late final _inflate_Filter_LessThanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_LessThan');
  late final _inflate_Filter_LessThan = _inflate_Filter_LessThanPtr
      .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_LessThanOrEqual() {
    return _inflate_Filter_LessThanOrEqual();
  }

  late final _inflate_Filter_LessThanOrEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_LessThanOrEqual');
  late final _inflate_Filter_LessThanOrEqual =
      _inflate_Filter_LessThanOrEqualPtr
          .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<FilterKind> inflate_Filter_Between() {
    return _inflate_Filter_Between();
  }

  late final _inflate_Filter_BetweenPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FilterKind> Function()>>(
          'inflate_Filter_Between');
  late final _inflate_Filter_Between = _inflate_Filter_BetweenPtr
      .asFunction<ffi.Pointer<FilterKind> Function()>();

  ffi.Pointer<SortByKind> inflate_SortBy_Asc() {
    return _inflate_SortBy_Asc();
  }

  late final _inflate_SortBy_AscPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SortByKind> Function()>>(
          'inflate_SortBy_Asc');
  late final _inflate_SortBy_Asc =
      _inflate_SortBy_AscPtr.asFunction<ffi.Pointer<SortByKind> Function()>();

  ffi.Pointer<SortByKind> inflate_SortBy_Desc() {
    return _inflate_SortBy_Desc();
  }

  late final _inflate_SortBy_DescPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SortByKind> Function()>>(
          'inflate_SortBy_Desc');
  late final _inflate_SortBy_Desc =
      _inflate_SortBy_DescPtr.asFunction<ffi.Pointer<SortByKind> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_SortBy_Asc extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_SortBy_Desc extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class SortByKind extends ffi.Union {
  external ffi.Pointer<wire_SortBy_Asc> Asc;

  external ffi.Pointer<wire_SortBy_Desc> Desc;
}

class wire_SortBy extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SortByKind> kind;
}

class wire_list_sort_by extends ffi.Struct {
  external ffi.Pointer<wire_SortBy> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_filter extends ffi.Struct {
  external ffi.Pointer<wire_Filter> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Filter extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<FilterKind> kind;
}

class FilterKind extends ffi.Union {
  external ffi.Pointer<wire_Filter_Or> Or;

  external ffi.Pointer<wire_Filter_And> And;

  external ffi.Pointer<wire_Filter_Not> Not;

  external ffi.Pointer<wire_Filter_Exists> Exists;

  external ffi.Pointer<wire_Filter_InValues> InValues;

  external ffi.Pointer<wire_Filter_GreaterThan> GreaterThan;

  external ffi.Pointer<wire_Filter_GreaterThanOrEqual> GreaterThanOrEqual;

  external ffi.Pointer<wire_Filter_Equal> Equal;

  external ffi.Pointer<wire_Filter_NotEqual> NotEqual;

  external ffi.Pointer<wire_Filter_LessThan> LessThan;

  external ffi.Pointer<wire_Filter_LessThanOrEqual> LessThanOrEqual;

  external ffi.Pointer<wire_Filter_Between> Between;
}

class wire_Filter_Or extends ffi.Struct {
  external ffi.Pointer<wire_list_filter> field0;
}

class wire_Filter_And extends ffi.Struct {
  external ffi.Pointer<wire_list_filter> field0;
}

class wire_Filter_Not extends ffi.Struct {
  external ffi.Pointer<wire_Filter> field0;
}

class wire_Filter_Exists extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;
}

class wire_Filter_InValues extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_StringList> values;
}

class wire_Filter_GreaterThan extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_Filter_GreaterThanOrEqual extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_Filter_Equal extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_Filter_NotEqual extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_Filter_LessThan extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_Filter_LessThanOrEqual extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_Filter_Between extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field;

  external ffi.Pointer<wire_uint_8_list> from;

  external ffi.Pointer<wire_uint_8_list> to;
}

class wire_Synonyms extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> word;

  external ffi.Pointer<wire_StringList> synonyms;
}

class wire_list_synonyms extends ffi.Struct {
  external ffi.Pointer<wire_Synonyms> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MimirIndexSettings extends ffi.Struct {
  external ffi.Pointer<wire_StringList> searchable_fields;

  external ffi.Pointer<wire_StringList> filterable_fields;

  external ffi.Pointer<wire_StringList> sortable_fields;

  external ffi.Pointer<wire_StringList> ranking_rules;

  external ffi.Pointer<wire_StringList> stop_words;

  external ffi.Pointer<wire_list_synonyms> synonyms;

  @ffi.Bool()
  external bool typos_enabled;

  @ffi.Uint8()
  external int min_word_size_for_one_typo;

  @ffi.Uint8()
  external int min_word_size_for_two_typos;

  external ffi.Pointer<wire_StringList> disallow_typos_on_words;

  external ffi.Pointer<wire_StringList> disallow_typos_on_fields;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
